{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Desktop\\\\movie-quiz-new\\\\movie-quiz\\\\movie-app\\\\src\\\\Components\\\\GuessActor\\\\GAComponents\\\\GAQuestion.js\";\nimport React from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport GAContent from './GAContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass GAQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this._mounted = false;\n    this.getQuestion = this.getQuestion.bind(this);\n    this.removeQuestion = this.removeQuestion.bind(this);\n    this.fetchQuestion = this.fetchQuestion.bind(this);\n    this.state = {\n      questionAvailable: false,\n      currentQueue: []\n    };\n  }\n\n  async fetchQuestion() {\n    const res = await fetch('https://www.bigfatfilmquiz.com/getActorAPI', {\n      signal: this.props.controller.signal\n    }).then();\n    const finalData = await res.json();\n    return this.fetchQuestion();\n  } // getting a question\n\n\n  async getQuestion() {\n    console.log(\"called\");\n\n    if (this._mounted === true) {\n      await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', {\n        signal: this.props.controller.signal\n      }).then(res => {\n        res.json();\n        console.log(res.json());\n      });\n    }\n    /*if (this.props.queue.length === 0) {\r\n        this.setState({ questionAvailable: false});\r\n    }\r\n    if (this._mounted === true) {\r\n        this.fetchQuestion();\r\n    }*/\n    // redo fetch!! - look at old version of app\n\n    /*if (this._mounted === true) {\r\n        await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', {signal: this.props.controller.signal}).then(res => {\r\n            res.json();\r\n        }).then(data => {\r\n            alert(data);\r\n            var indexCheck = this.state.currentQueue.indexOf(data.actorID);\r\n            if (indexCheck === -1) {\r\n                var newQueue = this.state.currentQueue;\r\n                newQueue.push(data.actorID);\r\n                this.setState({ currentQueue: newQueue} );\r\n                this.props.enqueue(data);\r\n                this.setState({ questionAvailable: true });\r\n            } else {\r\n                this.getQuestion();\r\n                alert(\"called again\");\r\n            }\r\n            \r\n        }).catch((error) => {\r\n            this.getQuestion();\r\n        });\r\n    }*/\n\n  }\n\n  removeQuestion() {\n    if (this.props.queue.length === 1) {\n      this.setState({\n        questionAvailable: false\n      });\n    }\n\n    this.props.dequeue();\n  }\n\n  componentDidMount() {\n    // onload of the component\n    this._mounted = true;\n\n    if (this.props.queue.length === 0) {\n      this.getQuestion();\n      this.getQuestion();\n      this.getQuestion();\n    } else {\n      this.setState({\n        questionAvailable: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    //this.controller.abort();\n    this._mounted = false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.questionAvailable ? /*#__PURE__*/_jsxDEV(GAContent, {\n        question: this.props.queue[0],\n        gameOver: this.props.gameOver,\n        increaseScore: this.props.increaseScore,\n        resetScore: this.props.resetScore,\n        removeQuestion: this.removeQuestion,\n        newQuestion: this.getQuestion,\n        score: this.props.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentBox\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"fade-in\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"spinner-border text-light\",\n            role: \"status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 53\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default GAQuestion;","map":{"version":3,"sources":["C:/Users/Matt/Desktop/movie-quiz-new/movie-quiz/movie-app/src/Components/GuessActor/GAComponents/GAQuestion.js"],"names":["React","ClipLoader","GAContent","GAQuestion","Component","constructor","props","_mounted","getQuestion","bind","removeQuestion","fetchQuestion","state","questionAvailable","currentQueue","res","fetch","signal","controller","then","finalData","json","console","log","queue","length","setState","dequeue","componentDidMount","componentWillUnmount","render","gameOver","increaseScore","resetScore","score"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nimport GAContent from './GAContent';\r\n\r\nclass GAQuestion extends React.Component {\r\n    _mounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.removeQuestion = this.removeQuestion.bind(this);\r\n        this.fetchQuestion = this.fetchQuestion.bind(this);\r\n        this.state = { questionAvailable: false, currentQueue: [] };\r\n    }\r\n\r\n    async fetchQuestion() {\r\n        const res = await fetch('https://www.bigfatfilmquiz.com/getActorAPI', { signal: this.props.controller.signal }).then();\r\n        const finalData = await res.json();\r\n\r\n        return this.fetchQuestion();\r\n    }\r\n\r\n    // getting a question\r\n    async getQuestion() {\r\n        console.log(\"called\");\r\n        if (this._mounted === true) {\r\n            await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', { signal: this.props.controller.signal}).then(res => { res.json(); console.log(res.json());});\r\n        }\r\n        /*if (this.props.queue.length === 0) {\r\n            this.setState({ questionAvailable: false});\r\n        }\r\n        if (this._mounted === true) {\r\n            this.fetchQuestion();\r\n        }*/\r\n        // redo fetch!! - look at old version of app\r\n        /*if (this._mounted === true) {\r\n            await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', {signal: this.props.controller.signal}).then(res => {\r\n                res.json();\r\n            }).then(data => {\r\n                alert(data);\r\n                var indexCheck = this.state.currentQueue.indexOf(data.actorID);\r\n                if (indexCheck === -1) {\r\n                    var newQueue = this.state.currentQueue;\r\n                    newQueue.push(data.actorID);\r\n                    this.setState({ currentQueue: newQueue} );\r\n                    this.props.enqueue(data);\r\n                    this.setState({ questionAvailable: true });\r\n                } else {\r\n                    this.getQuestion();\r\n                    alert(\"called again\");\r\n                }\r\n                \r\n            }).catch((error) => {\r\n                this.getQuestion();\r\n            });\r\n        }*/\r\n    }\r\n\r\n    removeQuestion() {\r\n        if (this.props.queue.length === 1) {\r\n            this.setState({ questionAvailable: false});\r\n        }\r\n        this.props.dequeue();\r\n    }\r\n\r\n    componentDidMount() { // onload of the component\r\n        \r\n        this._mounted = true;\r\n        if (this.props.queue.length === 0) {\r\n            this.getQuestion();\r\n            this.getQuestion();\r\n            this.getQuestion();\r\n        } else {\r\n            this.setState({ questionAvailable: true});\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //this.controller.abort();\r\n        this._mounted = false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.state.questionAvailable ? <GAContent \r\n                                                    question={this.props.queue[0]} \r\n                                                    gameOver={this.props.gameOver} \r\n                                                    increaseScore={this.props.increaseScore}\r\n                                                    resetScore={this.props.resetScore}\r\n                                                    removeQuestion={this.removeQuestion} \r\n                                                    newQuestion={this.getQuestion}\r\n                                                    score={this.props.score} /> \r\n                                                    : \r\n                                                    <div className=\"contentBox\">\r\n                                                        <div class=\"fade-in\">\r\n                                                            <div class=\"spinner-border text-light\" role=\"status\">\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GAQuestion;"]},"metadata":{},"sourceType":"module"}