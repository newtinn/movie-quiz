{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Matt\\\\Desktop\\\\movie-quiz-new\\\\movie-quiz\\\\movie-app\\\\src\\\\Components\\\\GuessActor\\\\GAComponents\\\\GAQuestion.js\";\nimport React from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport GAContent from './GAContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst controller = new AbortController();\nconst {\n  signal\n} = controller;\n\nclass GAQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n    this._mounted = false;\n    this.getQuestion = this.getQuestion.bind(this);\n    this.removeQuestion = this.removeQuestion.bind(this);\n    this.getQuestionData = this.getQuestionData.bind(this);\n    this.state = {\n      questionAvailable: false,\n      currentQueue: []\n    };\n  } // get question data\n\n\n  async getQuestionData() {\n    const res = await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI').then();\n    const final_data = await res.json();\n    return final_data;\n  } // getting a question\n\n\n  getQuestion() {\n    if (this.props.queue.length === 0) {\n      this.setState({\n        questionAvailable: false\n      });\n    }\n\n    this.getQuestionData().then(res => console.log(res));\n\n    if (this._mounted === true) {\n      fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', {\n        signal\n      }).then(res => res.json()).then(data => {\n        if (this._mounted === true) {\n          var indexCheck = this.state.currentQueue.indexOf(data.actorID);\n\n          if (indexCheck === -1) {\n            var newQueue = this.state.currentQueue;\n            newQueue.push(data.actorID);\n            this.setState({\n              currentQueue: newQueue\n            });\n            this.props.enqueue(data);\n            this.setState({\n              questionAvailable: true\n            });\n          } else {\n            this.getQuestion();\n          }\n        }\n      }).catch(error => {\n        if (error.name !== \"AbortError\") {\n          this.getQuestion();\n        }\n      });\n    }\n  }\n\n  removeQuestion() {\n    if (this.props.queue.length === 1) {\n      this.setState({\n        questionAvailable: false\n      });\n    }\n\n    this.props.dequeue();\n  }\n\n  componentDidMount() {\n    // onload of the component\n    this._mounted = true;\n\n    if (this.props.queue.length === 0) {\n      this.getQuestion();\n      this.getQuestion();\n      this.getQuestion();\n    } else {\n      this.setState({\n        questionAvailable: true\n      });\n    }\n\n    return () => this.setState({\n      _mounted: false\n    });\n  }\n\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: this.state.questionAvailable ? /*#__PURE__*/_jsxDEV(GAContent, {\n        question: this.props.queue[0],\n        gameOver: this.props.gameOver,\n        increaseScore: this.props.increaseScore,\n        resetScore: this.props.resetScore,\n        removeQuestion: this.removeQuestion,\n        newQuestion: this.getQuestion,\n        score: this.props.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 49\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentBox\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"fade-in\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"spinner-border text-light\",\n            role: \"status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 61\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 53\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default GAQuestion;","map":{"version":3,"sources":["C:/Users/Matt/Desktop/movie-quiz-new/movie-quiz/movie-app/src/Components/GuessActor/GAComponents/GAQuestion.js"],"names":["React","ClipLoader","GAContent","controller","AbortController","signal","GAQuestion","Component","constructor","props","_mounted","getQuestion","bind","removeQuestion","getQuestionData","state","questionAvailable","currentQueue","res","fetch","then","final_data","json","queue","length","setState","console","log","data","indexCheck","indexOf","actorID","newQueue","push","enqueue","catch","error","name","dequeue","componentDidMount","componentWillUnmount","render","gameOver","increaseScore","resetScore","score"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nimport GAContent from './GAContent';\r\n\r\nconst controller = new AbortController();\r\nconst { signal } = controller;\r\n\r\nclass GAQuestion extends React.Component {\r\n    _mounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getQuestion = this.getQuestion.bind(this);\r\n        this.removeQuestion = this.removeQuestion.bind(this);\r\n        this.getQuestionData = this.getQuestionData.bind(this);\r\n        this.state = { questionAvailable: false, currentQueue: [] };\r\n    }\r\n\r\n    // get question data\r\n    async getQuestionData() {\r\n        const res = await fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI').then();\r\n        const final_data = await res.json();\r\n\r\n        return final_data;\r\n    }\r\n\r\n    // getting a question\r\n    getQuestion() {\r\n        if (this.props.queue.length === 0) {\r\n            this.setState({ questionAvailable: false});\r\n        }\r\n\r\n        this.getQuestionData().then(res => console.log(res));\r\n\r\n        if (this._mounted === true) {\r\n            fetch('https://bigfatmoviequiz.herokuapp.com/getActorAPI', { signal }).then(res => res.json()).then(data => {\r\n                if (this._mounted === true) {\r\n                    var indexCheck = this.state.currentQueue.indexOf(data.actorID);\r\n                    if (indexCheck === -1) {\r\n                        var newQueue = this.state.currentQueue;\r\n                        newQueue.push(data.actorID);\r\n                        this.setState({ currentQueue: newQueue} );\r\n                        this.props.enqueue(data);\r\n                        this.setState({ questionAvailable: true });\r\n                    } else {\r\n                        this.getQuestion();\r\n                    }\r\n                }\r\n            }).catch((error) => {\r\n                if (error.name !== \"AbortError\") {\r\n                    this.getQuestion();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    removeQuestion() {\r\n        if (this.props.queue.length === 1) {\r\n            this.setState({ questionAvailable: false});\r\n        }\r\n        this.props.dequeue();\r\n    }\r\n\r\n    componentDidMount() { // onload of the component\r\n        this._mounted = true;\r\n        if (this.props.queue.length === 0) {\r\n            this.getQuestion();\r\n            this.getQuestion();\r\n            this.getQuestion();\r\n        } else {\r\n            this.setState({ questionAvailable: true});\r\n        }\r\n        return () => this.setState({_mounted: false});\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._mounted = false;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.state.questionAvailable ? <GAContent \r\n                                                    question={this.props.queue[0]} \r\n                                                    gameOver={this.props.gameOver} \r\n                                                    increaseScore={this.props.increaseScore}\r\n                                                    resetScore={this.props.resetScore}\r\n                                                    removeQuestion={this.removeQuestion} \r\n                                                    newQuestion={this.getQuestion}\r\n                                                    score={this.props.score} /> \r\n                                                    : \r\n                                                    <div className=\"contentBox\">\r\n                                                        <div class=\"fade-in\">\r\n                                                            <div class=\"spinner-border text-light\" role=\"status\">\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GAQuestion;"]},"metadata":{},"sourceType":"module"}